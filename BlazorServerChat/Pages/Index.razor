@page "/"
@attribute [Authorize]
@using BlazorServerChat.Hubs
@using Microsoft.AspNetCore.Identity
@using BlazorServerChat.Areas.Identity
@using BlazorServerChat.Data
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@using Microsoft.AspNetCore.SignalR.Client
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager navigationManager
@inject ApplicationDbContext DbContext

<PageTitle>Index</PageTitle>
@user
<h1>Blazor SignalR Chat Sample</h1>
<hr />

@if (!_isChatting)
{
    <p>
        Enter your name to start chatting:
    </p>

    <input type="text" maxlength="32" @bind="@_username" />
    <button type="button" @onclick="Chat"><span class="oi oi-chat" aria-hidden="true"></span> Chat!</button>

    // Error messages
    @if (_message != null)
    {
        <div class="invalid-feedback">@_message</div>
        <small id="emailHelp" class="form-text text-muted">@_message</small>
    }
}
else
{
    // banner to show current user
    <div class="alert alert-secondary mt-4" role="alert">
        <span class="oi oi-person mr-2" aria-hidden="true"></span>
        <span>You are connected as <b>@_username</b></span>
        <button class="btn btn-sm btn-warning ml-md-auto" @onclick="DisconnectAsync">退室</button>
    </div>
    // display messages
    <div id="scrollbox">
        <div class="container">
            <div class="row">
                <div class="col-10">
        <textarea style="width:95%;" placeholder="enter your comment" @bind="@_newMessage" ></textarea>&nbsp;
        </div>
        <div class="col-2">
        <button class="btn btn-primary" @onclick="@(s =>SendAsync(_newMessage))">発言</button>
        </div>
        </div>
        </div>
        @foreach (var item in _messages.OrderByDescending(x => x.PostTime))
        {
            @if (item.IsNotice)
            {
                                <RadzenCard class="m-0" Style="background-color:#e1f7f4;">
                    <div class="container ">
                        <div class="row">
                            <div class="col-12">@item.Body</div>

                    </div>
                    <div class="row">
                        <div class="col-1">

                        </div>
                        <div class="col-11 fs-6">
                            @item.PostTime.ToString()
                        </div>
                    </div>

                    </div>
                </RadzenCard>

            }
            else
            {
                <RadzenCard class="m-0" Style="background-color:#daebf4;">
                    <div class="container">
                        <div class="row">
                    <div class="col-1" style="text-align:right;">@item.Username：</div>
                    <div class="col-11">@item.Body</div>
                    </div>
                    <div class="row">
                        <div class="col-1">

                        </div>
                        <div class="col-11 fs-6">
                            @item.PostTime.ToString()
                        </div>
                    </div>
                    </div>
                </RadzenCard>
            }
        }
        <hr />
    </div>
}

@code {
    private string? user = string.Empty;
    // flag to indicate chat status
    private bool _isChatting = false;

    // name of the user who will be chatting
    private string? _username;

    // on-screen message
    private string? _message;

    // new message input
    private string? _newMessage;

    // list of messages in chat
    private List<Message> _messages = new List<Message>();

    private string? _hubUrl;
    private HubConnection _hubConnection;
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authState.User.Identity?.Name;
        _username = user;
        if (string.IsNullOrWhiteSpace(_username))
        {
            _message = "Please enter a name";
            return;
        }

        try
        {
            // Start chatting and force refresh UI.
            _isChatting = true;
            await Task.Delay(1);

            // remove old messages if any
            _messages.Clear();

            var context = DbContext.Chats.OrderByDescending(x => x.Time).Take(100);

            foreach (Chat chat in context)
            {
                Message message = new Message(chat.Name, chat.Message, false);
                message.PostTime = chat.Time;
                _messages.Add(message);
            }


            // Create the chat client
            string baseUrl = navigationManager.BaseUri;

            _hubUrl = baseUrl.TrimEnd('/') + BlazorChatHub.HubUrl;
            if (_hubConnection == null)
            {
                _hubConnection = new HubConnectionBuilder()
                    .WithUrl(_hubUrl)
                    .Build();

                _hubConnection.On<string, string>("Broadcast", BroadcastMessage);

                await _hubConnection.StartAsync();

                await SendAsync($"[Notice] {_username} おかえりなさい");
            }
        }
        catch (Exception e)
        {
            _message = $"ERROR: Failed to start chat client: {e.Message}";
            _isChatting = false;
        }

    }


    private async Task Chat()
    {
        // check username is valid
        if (string.IsNullOrWhiteSpace(_username))
        {
            _message = "Please enter a name";
            return;
        }

        try
        {
            // Start chatting and force refresh UI.
            _isChatting = true;
            await Task.Delay(1);

            // remove old messages if any
            _messages.Clear();

            var context = DbContext.Chats.OrderByDescending(x => x.Time);

            foreach (Chat chat in context)
            {
                Message message = new Message(chat.Name, chat.Message, false);
                message.PostTime = chat.Time;
                _messages.Add(message);
            }

            // Create the chat client
            string baseUrl = navigationManager.BaseUri;

            _hubUrl = baseUrl.TrimEnd('/') + BlazorChatHub.HubUrl;

            _hubConnection = new HubConnectionBuilder()
                .WithUrl(_hubUrl)
                .Build();

            _hubConnection.On<string, string>("Broadcast", BroadcastMessage);

            await _hubConnection.StartAsync();

            await SendAsync($"[Notice] {_username} さんお帰りなさい");
        }
        catch (Exception e)
        {
            _message = $"ERROR: Failed to start chat client: {e.Message}";
            _isChatting = false;
        }
    }

    private void BroadcastMessage(string name, string message)
    {
        bool isMine = name.Equals(_username, StringComparison.OrdinalIgnoreCase);

        _messages.Add(new Message(name, message, isMine));

        // Inform blazor the UI needs updating
        StateHasChanged();
    }

    private async Task DisconnectAsync()
    {
        if (_isChatting)
        {
            await SendAsync($"[Notice] {_username} さんいってらっしゃい");

            await _hubConnection.StopAsync();
            await _hubConnection.DisposeAsync();

            _hubConnection = null;
            _isChatting = false;
        }
        navigationManager.NavigateTo("./Counter");
    }

    private async Task SendAsync(string message)
    {
        if (_isChatting && !string.IsNullOrWhiteSpace(message))
        {
            Chat chat = new Chat();
            chat.Name = _username;
            chat.Message = message;
            DbContext.Chats.Add(chat);
            DbContext.SaveChanges();

            await _hubConnection.SendAsync("Broadcast", _username, message);

            _newMessage = string.Empty;
        }
    }

    private class Message
    {
        public Message(string username, string body, bool mine)
        {
            Username = username;
            Body = body;
            Mine = mine;
        }

        public string Username { get; set; }
        public string Body { get; set; }
        public bool Mine { get; set; }
        public DateTime PostTime { get; set; } = DateTime.Now;

        public bool IsNotice => Body.StartsWith("[Notice]");

        public string CSS => Mine ? "sent" : "received";
    }
}
